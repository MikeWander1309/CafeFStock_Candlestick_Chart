import requests
import pandas as pd
import datetime as dt
import mplfinance as mpf

URL = "https://cafef.vn/du-lieu/Ajax/PageNew/DataHistory/PriceHistory.ashx"
HEADERS = {"User-Agent": "Mozilla/5.0"}

def find_support_resistance(df, window=10):

    recent_df = df.tail(50)

    highs = recent_df['High'].values
    lows = recent_df['Low'].values

    resistance_levels = []
    support_levels = []

    for i in range(window, len(highs) - window):
        if highs[i] == max(highs[i-window:i+window]):
            resistance_levels.append(highs[i])

        if lows[i] == min(lows[i-window:i+window]):
            support_levels.append(lows[i])

    resistance_levels = sorted(set(resistance_levels), reverse=True)[:3]
    support_levels = sorted(set(support_levels))[:3]

    return support_levels, resistance_levels

def analyze_buy_sell(df, supports, resistances):
    """Ph√¢n t√≠ch ƒë∆°n gi·∫£n ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω mua/b√°n"""
    current_price = df['Close'].iloc[-1]
    ma20 = df['Close'].rolling(20).mean().iloc[-1]

    suggestions = []

    if current_price > ma20:
        suggestions.append("üìà Gi√° ƒëang tr√™n MA20 - Xu h∆∞·ªõng tƒÉng")
    else:
        suggestions.append("üìâ Gi√° ƒëang d∆∞·ªõi MA20 - Xu h∆∞·ªõng gi·∫£m")

    for support in supports:
        if abs(current_price - support) / support < 0.02:  # G·∫ßn h·ªó tr·ª£ 2%
            suggestions.append(f"üíö Gi√° g·∫ßn v√πng h·ªó tr·ª£ {support:,.0f} - C√≥ th·ªÉ MUA")

    for resistance in resistances:
        if abs(current_price - resistance) / resistance < 0.02:  # G·∫ßn kh√°ng c·ª± 2%
            suggestions.append(f"üî¥ Gi√° g·∫ßn v√πng kh√°ng c·ª± {resistance:,.0f} - N√™n c√¢n nh·∫Øc B√ÅN")

    return suggestions

def plot_stock(symbol, interval="D"):
    today = dt.datetime.now()

    params = {
        "symbol": symbol,
        "StartDate": "",
        "EndDate": "",
        "PageIndex": 1,
        "PageSize": 1000
    }
    resp = requests.get(URL, params=params, headers=HEADERS)
    res = resp.json()

    if not res.get("Data") or not res["Data"].get("Data"):
        print(f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu cho {symbol}")
        return

    df = pd.DataFrame(res["Data"]["Data"])

    df['Ngay'] = pd.to_datetime(df['Ngay'], format='%d/%m/%Y', errors='coerce')
    df = df.dropna(subset=['Ngay'])

    df = df.rename(columns={
        'Ngay': 'Date',
        'GiaMoCua': 'Open',
        'GiaCaoNhat': 'High',
        'GiaThapNhat': 'Low',
        'GiaDongCua': 'Close',
        'KhoiLuongKhopLenh': 'Volume'
    })

    df = df[(df['Close'] > 0) & (df['Volume'] > 0)]
    df = df.set_index('Date').sort_index()

    if interval != "D":
        df = df.resample(interval).agg({
            "Open": "first",
            "High": "max",
            "Low": "min",
            "Close": "last",
            "Volume": "sum"
        }).dropna()

    market_close = today.replace(hour=15, minute=0, second=0, microsecond=0)
    if today < market_close and df.index[-1].date() == today.date():
        df = df.iloc[:-1]

    supports, resistances = find_support_resistance(df)

    df['MA20'] = df['Close'].rolling(window=20).mean()

    plot_df = df.tail(100).copy()

    hlines = []
    colors = []
    linewidths = []

    for support in supports:
        hlines.append(support)
        colors.append('green')
        linewidths.append(1)

    for resistance in resistances:
        hlines.append(resistance)
        colors.append('red')
        linewidths.append(1)

    ma20_plot = plot_df['MA20'].dropna()

    apds = []
    if len(ma20_plot) > 0:
        apds = [mpf.make_addplot(ma20_plot, color='blue', width=1)]

    custom_style = mpf.make_mpf_style(
        base_mpf_style='yahoo',
        rc={'font.size': 10}
    )

    if len(apds) > 0:
        mpf.plot(
            plot_df,
            type='candle',
            volume=True,
            style=custom_style,
            title=f"{symbol} - H·ªó tr·ª£/Kh√°ng c·ª±",
            ylabel="Price",
            ylabel_lower="Volume",
            figsize=(12, 8),
            hlines=dict(hlines=hlines, colors=colors, linewidths=linewidths),
            addplot=apds
        )
    else:
        mpf.plot(
            plot_df,
            type='candle',
            volume=True,
            style=custom_style,
            title=f"{symbol} - H·ªó tr·ª£/Kh√°ng c·ª±",
            ylabel="Price",
            ylabel_lower="Volume",
            figsize=(12, 8),
            hlines=dict(hlines=hlines, colors=colors, linewidths=linewidths)
        )

    print("" + "="*50)
    print(f"PH√ÇN T√çCH {symbol}")
    print("="*50)

    current_price = df['Close'].iloc[-1]
    print(f"Gi√° hi·ªán t·∫°i: {current_price:,.0f}")

    print(f"üü¢ H·ªó tr·ª£:")
    for i, support in enumerate(supports, 1):
        print(f"   S{i}: {support:,.0f}")

    print(f"üî¥ Kh√°ng c·ª±:")
    for i, resistance in enumerate(resistances, 1):
        print(f"   R{i}: {resistance:,.0f}")

    suggestions = analyze_buy_sell(df, supports, resistances)
    print(f"üí° G·ª¢I √ù:")
    for suggestion in suggestions:
        print(f"   {suggestion}")

    print("" + "="*50)

def ask_and_loop():
    while True:
        symbol = input("Nh·∫≠p m√£ c·ªï phi·∫øu (ho·∫∑c 'q' ƒë·ªÉ tho√°t): ").upper()
        if symbol == "Q":
            break

        print("Ch·ªçn khung th·ªùi gian: ")
        print("1 = Daily, 2 = Weekly, 3 = Monthly")
        choice = input("üëâ Nh·∫≠p l·ª±a ch·ªçn: ")

        if choice == "1":
            interval = "D"
        elif choice == "2":
            interval = "W"
        elif choice == "3":
            interval = "ME"
        else:
            interval = "D"

        plot_stock(symbol, interval)

if __name__ == "__main__":
    ask_and_loop()
#%%

#%%
